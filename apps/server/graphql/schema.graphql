type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  me: User
  ListExercises: Exercise
  ListTrainings: Training
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""User data"""
type User implements Node {
  """The ID of an object"""
  id: ID!
  firstName: String
  lastName: String
  email: String
  picture: String
  provider: String
}

"""Exercise data"""
type Exercise implements Node {
  """The ID of an object"""
  id: ID!
  name: String
  muscle_group: String
  description: String
  video_url: String
  owner_id: String
}

type Training implements Node {
  """The ID of an object"""
  id: ID!
  name: String
  description: String
  executed_days: Int
  owner_id: String
  exercises: [TrainingExercise]
}

type TrainingExercise {
  exercise_id: String
  reps: Int
  sets: Int
  weight: Float
  rest: Int
  details: Exercise
}

type Mutation {
  loginWithOAuth(input: LoginWithOAuthInput!): LoginWithOAuthPayload
  CreateOrUpdateExercise(input: CreateOrUpdateExerciseInput!): CreateOrUpdateExercisePayload
  CreateOrUpdateTraining(input: CreateOrUpdateTrainingInput!): CreateOrUpdateTrainingPayload
}

type LoginWithOAuthPayload {
  token: String!
  clientMutationId: String
}

input LoginWithOAuthInput {
  id_token: String!
  clientMutationId: String
}

type CreateOrUpdateExercisePayload {
  exercise: Exercise
  clientMutationId: String
}

input CreateOrUpdateExerciseInput {
  id: ID
  name: String!
  muscle_group: String!
  description: String
  video_url: String
  clientMutationId: String
}

type CreateOrUpdateTrainingPayload {
  training: Training
  clientMutationId: String
}

input CreateOrUpdateTrainingInput {
  id: ID
  name: String!
  description: String!
  exercises: [ExerciseInput]
  clientMutationId: String
}

input ExerciseInput {
  exercise_id: ID!
  reps: Int
  sets: Int!
  weight: Float!
  rest: Int!
}