type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  me: User
  allExercises(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    search: String
  ): ExerciseConnectionConnection!
  allTrainings(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    search: String
  ): TrainingConnectionConnection!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""User data"""
type User implements Node {
  """The ID of an object"""
  id: ID!
  firstName: String
  lastName: String
  email: String
  picture: String
  provider: String
}

"""A connection to a list of items."""
type ExerciseConnectionConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExerciseConnectionEdge]!
}

"""A connection to a list of items."""
interface Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type ExerciseConnectionEdge {
  """The item at the end of the edge."""
  node: Exercise

  """A cursor for use in pagination."""
  cursor: String!
}

"""Exercise data"""
type Exercise implements Node {
  """The ID of an object"""
  id: ID!
  _id: ID
  name: String
  muscle_group: String
  description: String
  video_url: String
  owner: String
}

"""A connection to a list of items."""
type TrainingConnectionConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TrainingConnectionEdge]!
}

"""An edge in a connection."""
type TrainingConnectionEdge {
  """The item at the end of the edge."""
  node: Training

  """A cursor for use in pagination."""
  cursor: String!
}

type Training implements Node {
  """The ID of an object"""
  id: ID!
  _id: ID
  name: String
  executed_days: Int
  owner: String
  exercises: [TrainingExercise]
}

type TrainingExercise {
  exercise_id: String
  reps: Int
  sets: Int
  weight: Float
  rest: Int
  details: Exercise
}

type Mutation {
  loginWithOAuth(input: LoginWithOAuthInput!): LoginWithOAuthPayload
  CreateOrUpdateExercise(input: CreateOrUpdateExerciseInput!): CreateOrUpdateExercisePayload
  DeleteExercise(input: DeleteExerciseInput!): DeleteExercisePayload
  CreateOrUpdateTraining(input: CreateOrUpdateTrainingInput!): CreateOrUpdateTrainingPayload
  DeleteTraining(input: DeleteTrainingInput!): DeleteTrainingPayload
}

type LoginWithOAuthPayload {
  token: String!
  clientMutationId: String
}

input LoginWithOAuthInput {
  id_token: String!
  clientMutationId: String
}

type CreateOrUpdateExercisePayload {
  exercise: Exercise
  clientMutationId: String
}

input CreateOrUpdateExerciseInput {
  _id: ID
  name: String!
  muscle_group: String!
  description: String
  video_url: String
  clientMutationId: String
}

type DeleteExercisePayload {
  deleted: Boolean
  clientMutationId: String
}

input DeleteExerciseInput {
  _id: ID
  clientMutationId: String
}

type CreateOrUpdateTrainingPayload {
  training: Training
  clientMutationId: String
}

input CreateOrUpdateTrainingInput {
  _id: ID
  name: String!
  exercises: [ExerciseInput]
  clientMutationId: String
}

input ExerciseInput {
  exercise_id: ID!
  reps: Int
  sets: Int!
  weight: Float
  rest: Int
}

type DeleteTrainingPayload {
  deleted: Boolean
  clientMutationId: String
}

input DeleteTrainingInput {
  _id: ID
  clientMutationId: String
}